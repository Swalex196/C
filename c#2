1. Constructor (Yapıcı Metot) – Python’daki __init__ Gibi
C#’ta, bir sınıfın nesnesi oluşturulduğunda çalışan metot, constructor olarak bilinir. 
Python’daki __init__ metodunun karşılığıdır.

class Araba
{
    public string Marka;
    public string Model;
    
    // Constructor (yapıcı metot)
    public Araba(string marka, string model)
    {
        Marka = marka;
        Model = model;
    }
}

-------------------------------------------------------------
2. ToString() – Python’daki __str__ Gibi
C#’ta, bir nesnenin yazdırıldığında nasıl görüneceğini belirlemek için ToString() metodu override edilebilir. 
Bu, Python’daki __str__ metoduna benzer.

class Araba
{
    public string Marka;
    public string Model;

    public Araba(string marka, string model)
    {
        Marka = marka;
        Model = model;
    }

    // ToString metodu
    public override string ToString()
    {
        return $"{Marka} {Model}";
    }
}

Araba araba1 = new Araba("Toyota", "Corolla");
Console.WriteLine(araba1);  // Çıktı: Toyota Corolla
-------------------------------------------------------------
3. Equals() – Python’daki __eq__ Gibi
C#’ta iki nesnenin eşit olup olmadığını karşılaştırmak için Equals() metodunu override edebilirsiniz. 
Bu, Python’daki __eq__ metoduna karşılık gelir.

class Araba
{
    public string Marka;
    public string Model;

    public Araba(string marka, string model)
    {
        Marka = marka;
        Model = model;
    }

    // Equals metodu
    public override bool Equals(object obj)
    {
        if (obj == null || this.GetType() != obj.GetType())
        {
            return false;
        }

        Araba other = (Araba)obj;
        return this.Marka == other.Marka && this.Model == other.Model;
    }

    public override int GetHashCode()
    {
        return Marka.GetHashCode() ^ Model.GetHashCode();
    }
}

Araba araba1 = new Araba("Toyota", "Corolla");
Araba araba2 = new Araba("Toyota", "Corolla");

Console.WriteLine(araba1.Equals(araba2));  // Çıktı: True
-------------------------------------------------------------
4. Operator Overloading (Operatör Aşırı Yükleme)
C#’ta, operatör aşırı yükleme (operator overloading) ile Python’daki gibi +, -, == gibi 
operatörlerin nasıl davranacağını belirleyebilirsiniz. 
Python’daki __add__ ve __sub__ metotlarına benzer şekilde çalışır.

class Nokta
{
    public int X;
    public int Y;

    public Nokta(int x, int y)
    {
        X = x;
        Y = y;
    }

    // + operatörünü aşırı yükleme (operator overloading)
    public static Nokta operator +(Nokta a, Nokta b)
    {
        return new Nokta(a.X + b.X, a.Y + b.Y);
    }

    public override string ToString()
    {
        return $"Nokta: ({X}, {Y})";
    }
}

Nokta nokta1 = new Nokta(1, 2);
Nokta nokta2 = new Nokta(3, 4);
Nokta sonuc = nokta1 + nokta2;

Console.WriteLine(sonuc);  // Çıktı: Nokta: (4, 6)
------------------------------------------------------------------------------
5. GetHashCode()
C#’ta, bir nesnenin benzersiz bir hash kodunu döndürmek için GetHashCode() 
metodunu override edebilirsiniz. Bu, Python’daki __hash__ metoduna benzer.

class Araba
{
    public string Marka;
    public string Model;

    public Araba(string marka, string model)
    {
        Marka = marka;
        Model = model;
    }

    public override int GetHashCode()
    {
        return Marka.GetHashCode() ^ Model.GetHashCode();
    }
}
------------------------------------------------------------------------------
6. Indexer (Indeksleyici)
C#’ta indeksleyiciler, bir sınıfın içerisindeki elemanlara tıpkı dizilerde olduğu gibi indeks yoluyla erişim sağlar. 
Bu, Python’da listelere veya sözlüklere erişime benzer.

class Sinif
{
    private string[] ogrenciler = new string[3];

    public string this[int index]
    {
        get { return ogrenciler[index]; }
        set { ogrenciler[index] = value; }
    }
}

Sinif sinif = new Sinif();
sinif[0] = "Ahmet";
sinif[1] = "Ayşe";
sinif[2] = "Mehmet";

Console.WriteLine(sinif[1]);  // Çıktı: Ayşe




